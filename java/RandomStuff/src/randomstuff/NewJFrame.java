/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package randomstuff;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;
import static randomstuff.RandomStuff.*;

/**
 *
 * @author j.cho18
 */
public class NewJFrame extends javax.swing.JFrame {
    
    static boolean isPaused = false;
    static private final Object pauseLock = new Object();

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    
    public static List<Integer> FindP(int j, Object... n) {
        List<Integer> temp = new ArrayList<>();
        for (int i = 0; i < j; i++) {
            if (isPalindromeWithOnlyInt(i)) temp.add(i);
        }
        if ((boolean)arrCheck(0, n)[0])
                if ((boolean)n[(int)arrCheck(0, n)[1]])
                    pl(String.format("There are %s palindromes below the number %s.", temp.size(), j));
        return temp;
    }
    
    public static Object[] arrCheck(int a, Object... x) {
        if (a > 5) {
            pl("arrCheck() function can only get a value upto 5.");
            throw new ArrayIndexOutOfBoundsException();
        }
        Object[] temp = new Object[5];
        for (int i = 0; i < 5; i++) {
            boolean tempNum = false;
            ArrayList<Object> tNums = new ArrayList<>();
            for (int j = 0; j < x.length; j++) {
                if (x[j] instanceof Boolean && i == 0) {
                    tempNum = true; tNums.add(j);
                }
                if (x[j] instanceof String && i == 1) {
                    tempNum = true; tNums.add(j);
                }
                if (x[j] instanceof Integer && i == 2) {
                    tempNum = true; tNums.add(j);
                }
                if (x[j] instanceof Double && i == 3) {
                    tempNum = true; tNums.add(j);
                }
                if (x[j] instanceof Float && i == 4) {
                    tempNum = true; tNums.add(j);
                }
            }
            tNums.add(0, tempNum);
            temp[i] = tNums.toArray();
        }
        return (Object[])temp[a];
    }
    
    public static Object msT(int howMany, RandomStuff.Command aFunc, int n, Object... p) throws InterruptedException {
        float a = 0;
        boolean isTrue = false;
        
        if (howMany < 1) {
            howMany = 1;
        }
        
        if ((boolean)arrCheck(0, p)[0]) {
            for (int j = 1; j < arrCheck(0, p).length; j++) {
                if ((boolean)p[(int)arrCheck(0, p)[j]]) isTrue = true;
            }
        }
        
        pl("Started measuring time...");
        
        
        for (int i = 1; i < howMany + 1; i++) {
            if (isPaused) {
                try {
                    synchronized (pauseLock) {
                        pauseLock.wait();
                    }
                }
                catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                }
            }
            float st = System.nanoTime();
            aFunc.execute(n, p);
            float ft = System.nanoTime();
            a += (ft - st);

            if (isTrue) {
                abc.setText("  Total elapsed time = "+String.valueOf(a/1e6f)+"ms");
                abd.setText("Average elapsed time = "+String.valueOf(a/(1e6f * i))+"ms");
                abe.setText("Progress - " + i + " / " + howMany);
                acc.setValue(100*i/howMany);
            }        
        }
        System.out.println();
        
        if ((boolean)arrCheck(1, p)[0]) {
            String tempS = "";
            for (int i = 1; i < arrCheck(1, p).length; i++) {
                tempS += p[(int)arrCheck(1, p)[i]];
            }
            String[] tempArr = tempS.split("");
            for (String s : tempArr) {
                if (s.equals("s"))
                    return String.valueOf(a / (howMany * (float)p[(int)arrCheck(4, p)[1]]))+ (String)p[(int)arrCheck(1, p)[1]];
            }            
        }
        return a / (howMany * (float)p[(int)arrCheck(4, p)[1]]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        acc = new javax.swing.JProgressBar();
        abe = new javax.swing.JLabel();
        abc = new javax.swing.JLabel();
        abd = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jToggleButton1 = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(1, 1, 10, 10));
        setFocusable(false);

        acc.setForeground(new java.awt.Color(51, 255, 51));
        acc.setStringPainted(true);

        abe.setText("Progess");

        abc.setText("Value");

        abd.setText("jLabel2");

        jCheckBox1.setText("Close when done");

        jToggleButton1.setText("Pause");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(abc)
                    .addComponent(abe)
                    .addComponent(acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(abd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addComponent(jToggleButton1))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(abc)
                    .addComponent(jCheckBox1))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(abd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(abe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(acc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToggleButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        synchronized(pauseLock) {
            pauseLock.notifyAll();
        }
        isPaused = !isPaused;
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
        
        try {
            pl(msT(1000, RandomStuff::FindP, 2000000, 1e6f, 374, "ms", 12525, 1e7d, false, false, false, "hellooooowwererr", true, "Oysterr"));
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        
        while(true) {
            if (jCheckBox1.isSelected()) {
                System.exit(0);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel abc;
    private static javax.swing.JLabel abd;
    private static javax.swing.JLabel abe;
    private static javax.swing.JProgressBar acc;
    private static javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables
}
